const CfgLite = window.appCfg.__proto__.constructor;
const path = window.require('path');
const cfg = new CfgLite(path.join(__dirname, 'config.cfg'));

const Q = [];
const tmpQ = [];
let running = false;

const startSpeech = [
	(e) => 'ÎèåÎ†§ ÎèåÎ†§ Î£∞Î†õ!',
	(e) => 'Í≥ºÏó∞ Ïñ¥Îñ§ Í≤å ÎΩëÌûêÍπå~?',
	(e) => 'Ïù¥Í≤å Ï¢ãÏïÑÎ≥¥Ïó¨Ïöî.¬†À≥‚öÜ…û‚öÜÀ≥',
	(e) => 'ÎÇòÎäî Î≠îÏßÄ ÏïåÍ≥† ÏûàÏßÄÎßå Ïïà ÏïåÎ†§Ï§ÑÍ±∞ÏóêÏöî. üòù',
	(e) => `${e.data.author.nickname}ÎãòÏùÄ Î≠ò Í∞ñÍ≥† Ïã∂Ïñ¥Ïöî?`,
	(e) => 'Ìóê. Ïù¥Í≤å Í±∏Î¶¨ÎÑ§? „Ä£(¬∫Œî¬∫)„Ä£',
];

const meanlessItems = [
	'ÌèâÏÉù Î™®Îì† Ìé∏ÏùòÏ†ê Î¨¥Î£å ÏûÖÏû•Í∂å',
	'ÎîîÏ†úÏù¥ÏóêÍ≤å Ïä§Ìëº Ïè† Í∏∞Ìöå',
	'"Ïú§Íµ∞Îãò Î©ãÏûàÏñ¥Ïöî!"ÎùºÍ≥† ÎßêÌïòÍ∏∞',
	'ÎßàÏùåÏÜçÏúºÎ°ú ÎÖ∏ÎûòÎ∂ÄÎ•¥Í∏∞ Î≤åÏπô',
	'Î™®Îì† Î∞±ÌôîÏ†ê Î¨¥Ï†úÌïú ÏïÑÏù¥ÏáºÌïë Ïø†Ìè∞',
];

const whackSpeech = [
	async (e, sock) => {
		sock.message(`Ìóê ${e.data.author.nickname}Îãò. Ï§ëÎåÄÎ∞úÌëúÍ∞Ä ÏûàÏñ¥Ïöî.`);
		await sleep(2000);
		sock.message(`Ïù¥Î≤àÏóê ÎãπÏ≤®ÎêòÏã† Ìï≠Î™©ÏùÄ Î¨¥Î†§...!`);
		await sleep(2000);
		sock.message('ÍΩùÏù¥ÏóêÏöî. Î≠êÏßÄ? Î≤ÑÍ∑ºÍ∞Ä? ¬†¬ØÔºº_(„ÉÑ)_/¬Ø¬†');
		await sleep(2000);
		sock.message('ÎãπÏ≤®Îê† Îïå ÍπåÏßÄ „Ñ±„Ñ±!');
	},
	async (e, sock) => {
		sock.message('Ï∂ïÌïòÌï©ÎãàÎã§!');
		await sleep(2000);
		sock.message(`${e.data.author.nickname}ÎãòÏùÄ [${random(meanlessItems)}]Ïóê ÎãπÏ≤®ÎêòÏÖ®ÏäµÎãàÎã§!!!`);
		await sleep(2000);
		sock.message('ÍΩùÏù¥ÎûÄ ÏÜåÎ¶¨ÏóêÏöî. Î≠êÎùºÎèÑ ÎãπÏ≤®Îêú Í≤É Ï≤òÎüº Î≥¥Ïù¥ÎäîÍ≤å Ï¢ãÏûñÏïÑÏöî.¬†ÍâÇ¬†(‡πë¬Ø‡®ä¬Ø)œÉ¬†');
	},
	async (e, sock) => {
		sock.message('„Öã„Öã„Öã');
		await sleep(1000);
		sock.message('„Öã„Öã„Öã„Öã„Öã„Öã');
		await sleep(1000);
		sock.message('„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã');
		await sleep(1000);
		sock.message('ÍΩù„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã');
	},
	async (e, sock) => {
		sock.message('Ï†ÄÎü∞... ÍΩùÏù¥ÎÑ§Ïöî.');
		await sleep(2000);
		sock.message('Ïûê, Ïö∏ÏßÄ ÎßàÏãúÍ≥† Ìïú Î≤à Îçî!');
		await sleep(2000);
		sock.message(`${cfg.get('options.min')}Ïä§ÌëºÎ∞ñÏóê Ïïà Ìï¥Ïöî~.`);
		await sleep(2000);
		sock.message(`Ìï† Ïàò ÏûàÎã§. ${e.data.author.nickname}Îãò ÌååÏù¥ÌåÖ! ¬†Íí∞‚óç‡•¢‚Ä¢·¥ó‚Ä¢‚óç‡•¢Íí±¬†`);
	},
	async (e, sock) => {
		const reversList = [];
		cfg.get('list').forEach((l, idx) => {
			reversList[idx] = {
				percentage: 100 - l.percentage,
				value: l.value,
			};
		});
		let pick;
		do {
			pick = randomOnPickByPer(reversList);
		} while( !pick );
		sock.message('ÏôÄ......');
		await sleep(2000);
		sock.message(`${e.data.author.nickname}ÎãòÏùÄ......`);
		await sleep(2000);
		sock.message(`[${pick.value}] ÎãπÏ≤®!`);
		await sleep(2000);
		sock.message('Ïù¥ÎùºÎäî ÎÇ¥Ïö©Ïùò ÏÜåÏÑ§ Ï∂îÏ≤úÎ∞õÏïÑÏöî! ÏÇ¨Ïã§ ÍΩùÏûÖÎãàÎãπ~ ¬†‡ºΩŒÑ‚óû‡∏¥‡±™‚óü‡∏¥‚Äµ‡ºº¬†');
	},
];

const winSpeech = [
	async (e, sock) => {
		sock.message(`Ìóê ${e.data.author.nickname}Îãò. Ï§ëÎåÄÎ∞úÌëúÍ∞Ä ÏûàÏñ¥Ïöî.`);
		await sleep(2000);
		sock.message(`Ïù¥Î≤àÏóê ÎãπÏ≤®ÎêòÏã† Ìï≠Î™©ÏùÄ Î¨¥Î†§...!`);
		await sleep(2000);
		sock.message(`[${e.item.value}] ÏóêÏöî!`);
	},
	async (e, sock) => {
		sock.message('Ï∂ïÌïòÌï©ÎãàÎã§!');
		await sleep(2000);
		sock.message(`${e.data.author.nickname}ÎãòÏùÄ [${e.item.value}]Ïóê ÎãπÏ≤®ÎêòÏÖ®ÏäµÎãàÎã§!!!`);
	},
	async (e, sock) => {
		sock.message('„Öã„Öã„Öã');
		await sleep(1000);
		sock.message('„Öã„Öã„Öã„Öã„Öã„Öã');
		await sleep(1000);
		sock.message('„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã„Öã');
		await sleep(1000);
		sock.message(`ÏôÄ Ïù¥Í≤å [${e.item.value}] Í∞Ä ÎãπÏ≤®ÎêòÎÑ§.`);
	},
	async (e, sock) => {
		sock.message('ÏôÄ......');
		await sleep(2000);
		sock.message(`${e.data.author.nickname}ÎãòÏùÄ......`);
		await sleep(2000);
		sock.message(`Î¨¥Î†§ [${e.item.value}] ÎãπÏ≤®!`);
		await sleep(2000);
		sock.message(`Ïù¥Í≤å ÎãπÏ≤®ÎêòÎãà Í∞úÎÖ∏ÏûºÏù¥ÎÑ§ „Ñπ„Öá`);
	},
];

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
const rand = (num=0, min=0) => Math.floor(Math.random() * (num)) + min;
const random = (items) => items[rand(items.length)];

function sumArray(arr) {
	let s = 0;
	arr.forEach((a) => s += a);
	return s;
}

//function randomOnPickByPer(list = []) {
//	let percentage = Math.random();
//	let pickItems = [];
//	let pickItem;
//	let cumulative = 0;
//	let sum = 0;
//	let sumList = {};


//	list.forEach((l) => {
//		if ( !sumList[l.percentage] ) {
//			sumList[l.percentage] = [];
//		}
//		sumList[l.percentage].push(l);
//	});
//	sum = sumArray(Object.keys(sumList).map((p) => +p)) / 100;
//	//percentage *= sum;

//	list = list.sort((a, b) => a.percentage - b.percentage);
//	if ( !list.find((l) => l.value === 'ÍΩù') ) {
//		let p = 0;
//		list.push({
//			value: 'ÍΩù',
//			percentage: 100 - (sum * 100),
//		});
//	}

//	for ( const [per, value] of Object.entries(sumList) ) {
//		cumulative += (+per / 100);
//		if ( percentage <= cumulative ) {
//			pickItems = value;
//			break;
//		}
//	}

//	if ( pickItems.length > 1 ) {
//		const pick = rand(pickItems.length);
//		pickItem = pickItems[pick];
//	} else {
//		pickItem = pickItems[0];
//	}

//	return pickItem;
//}

function randomOnPickByPer(list = []) {
	const allItem = [];

	list.forEach((item) => {
		const count = item.percentage.toFixed(2) * 100;
		for ( let i = 0 ;i < count;i++ ) {
			allItem.push(item);
		}
	});

	const wrongCount = 10000 - allItem.length;

	if ( wrongCount ) {
		for ( let i = 0;i < wrongCount;i++ ) {
			allItem.push({ value: 'ÍΩù' });
		}
	}

	console.log(allItem);
	return random(allItem);
}

async function processor() {
	if ( running ) {
		return false;
	}

	running = true;

	const e = Q.shift();
	const sock = e.sock;
	if ( cfg.get('options.useEffect') ) {
		// TODO: use effect
	}

	const item = randomOnPickByPer(cfg.get('list'));
	if ( item && item.value !== 'ÍΩù' ) {
		e.item = item;
		await random(winSpeech)(e, sock);
	} else {
		await random(whackSpeech)(e, sock);
	}

	running = false;
	if ( cfg.get('options.auto') && tmpQ.length ) {
		Q.push(tmpQ.shift());
	}
	if ( Q.length ) {
		await sleep(2000);
		await processor();
	}
}

function checkPresent(data) {
	if ( cfg.get('options.type') === 'select' ) {
		const present = cfg.get('options.present');
		return present.name === data.sticker;
	}

	const num = data.amount * data.combo;
	return num >= cfg.get('options.min');
}

exports.live_present = (evt, sock) => {
	if ( !cfg.get('enable') ) {
		return false;
	}

	if ( checkPresent(evt.data) ) {
		evt.sock = sock;
		tmpQ.push(evt);
		if ( running === false && cfg.get('options.auto') ) {
			Q.push(tmpQ.shift());
			processor();
		}
	}
}

exports.live_message = (evt, sock) => {
	const message = evt.update_component.message.value;
	if ( message === '!Î£∞Î†õ' ) {
		const idx = tmpQ.findIndex((item) => item.data.author.id === evt.data.user.id);
		if ( idx !== -1 ) {
			const [tmp] = tmpQ.splice(idx, 1);
			tmp.sock = sock;
			Q.push(tmp);
			if ( !running ) {
				processor();
			}
		}
	}
}
